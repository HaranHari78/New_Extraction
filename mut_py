import os
import json
import re
from prompts_field import build_mutation_extraction_prompt
from utils import load_config, call_openai_api

# --- CONFIG ---
input_dir = r"C:\Users\HariharaM12\PycharmProjects\New_project\output\sentences"
output_file = r"C:\Users\HariharaM12\PycharmProjects\New_project\output\fields\mutational_status_grouped.json"
os.makedirs(os.path.dirname(output_file), exist_ok=True)

# --- BATCH RANGE ---
start_index = 0
end_index = 50  # Adjust as needed

# --- LOAD MODEL ---
config = load_config()
model = config['gpt_models']['model_gpt4o']

# --- CLEAN FUNCTION ---
def clean_response(resp: str) -> str:
    return re.sub(r'```(?:json)?\n?|\n?```', '', resp).strip()

# --- RESULT HOLDER ---
grouped_result = { "mutational_status": {} }

# --- PROCESS FILES ---
all_files = sorted([f for f in os.listdir(input_dir) if f.endswith(".json")])
batch_files = all_files[start_index:end_index]

for filename in batch_files:
    filepath = os.path.join(input_dir, filename)
    with open(filepath, 'r', encoding='utf-8') as f:
        data = json.load(f)

    doc_title = data.get("document_title", filename.replace(".json", ""))
    mutation_sents = data.get("mutational_status_sentences", [])
    if not mutation_sents:
        continue

    prompt_text = " ".join(mutation_sents)
    prompt = build_mutation_extraction_prompt(prompt_text, doc_title)
    response = call_openai_api(prompt, model)

    if not response:
        print(f"‚ùå No response: {doc_title}")
        continue

    try:
        raw = clean_response(response)
        parsed = json.loads(raw)
        mutation_data = parsed.get("mutational_status", {})

        for gene, fields in mutation_data.items():
            if not any(fields.values()):
                continue

            entry = {
                "document_title": doc_title,
                "status": fields.get("status", ""),
                "date": fields.get("date", ""),
                "evidence": fields.get("evidence", "")
            }

            if gene not in grouped_result["mutational_status"]:
                grouped_result["mutational_status"][gene] = []

            grouped_result["mutational_status"][gene].append(entry)

        print(f"‚úÖ Done: {doc_title}")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed: {doc_title} ‚Üí {e}")

# --- SAVE OUTPUT ---
with open(output_file, 'w', encoding='utf-8') as f:
    json.dump(grouped_result, f, indent=4)

print(f"\nüìÅ Grouped mutation output saved ‚Üí {output_file}")
