import json
import re
import os
import pandas as pd
from prompts import build_sentence_prompt, build_field_prompt
from utils import load_config, call_openai_api

# Create output directory
output_dir = r"C:\Users\HariharaM12\PycharmProjects\Medical_Data\output"
os.makedirs(output_dir, exist_ok=True)

# File paths
sentence_output_path = os.path.join(output_dir, 'extracted_sentences.json')
structured_output_path = os.path.join(output_dir, 'structured_data.json')

# Load config
config = load_config()
model_name = config['gpt_models']['model_gpt4o']
input_csv_path = r"C:\Users\HariharaM12\Downloads\medicaldata.csv"

# Clean function
def sanitize_json_response(raw_response: str):
    if not raw_response or not isinstance(raw_response, str):
        return ""
    cleaned = re.sub(r'```(?:json)?\n?|\n?```', '', raw_response).strip()
    return cleaned.replace('\n', ' ')

# Read data
df = pd.read_csv(input_csv_path, encoding='utf-8')
print(f"üìÑ Total rows found: {len(df)}")

# Results
sentence_outputs = []
structured_outputs = []

# Loop through rows (testing with first 5)
for idx, row in df.iloc[:5].iterrows():
    doc_title = row.get('title', "")
    doc_text = row.get('text', "")
    print(f"\nüîç Processing: {doc_title[:60]}")

    if not doc_text:
        continue

    # Sentence Extraction
    sentence_prompt = build_sentence_prompt(doc_text)
    sentence_response = call_openai_api(sentence_prompt, model_name)

    if not sentence_response:
        print("‚ö†Ô∏è Sentence extraction failed.")
        continue

    cleaned_sentence_json = sanitize_json_response(sentence_response)
    try:
        sentence_data = json.loads(cleaned_sentence_json)
        sentence_data["document_title"] = doc_title
        sentence_outputs.append(sentence_data)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è Sentence JSON parse error.")
        continue

    # Prepare combined sentence text for field extraction
    combined_text = ". ".join(
        sentence_data.get('aml_diagnosis_sentences', []) +
        sentence_data.get('precedent_disease_sentences', []) +
        sentence_data.get('performance_status_sentences', []) +
        sentence_data.get('mutational_status_sentences', [])
    )

    field_prompt = build_field_prompt(combined_text)
    structured_response = call_openai_api(field_prompt, model_name)

    if not structured_response:
        print("‚ö†Ô∏è Structured extraction failed.")
        continue

    cleaned_structured_json = sanitize_json_response(structured_response)
    try:
        structured_data = json.loads(cleaned_structured_json)
        structured_data["document_title"] = doc_title
        structured_outputs.append(structured_data)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è Structured JSON parse error.")
        continue

# Save JSON files
try:
    with open(sentence_output_path, 'w', encoding='utf-8') as f:
        json.dump(sentence_outputs, f, indent=4)
    print(f"‚úÖ Sentence results saved ‚Üí {sentence_output_path}")
except Exception as e:
    print(f"‚ùå Error saving sentence JSON: {e}")

try:
    with open(structured_output_path, 'w', encoding='utf-8') as f:
        json.dump(structured_outputs, f, indent=4)
    print(f"‚úÖ Structured results saved ‚Üí {structured_output_path}")
except Exception as e:
    print(f"‚ùå Error saving structured JSON: {e}")
