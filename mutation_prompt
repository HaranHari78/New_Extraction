def mutation_extraction_prompt(text: str, patient_id: int, name: str):
    return f"""
You are a medical language model trained to extract structured clinical data from patient notes.

You are analyzing the clinical note of a cancer patient.

🆔 Patient ID: {patient_id}
👤 Patient Name: {name}

From the clinical note below, extract **mutation status** information for the following genes:
- NPM1, TP53, FLT3, ASXL1

Look specifically for phrases indicating:
- Whether the gene is **mutated**, **wild type**, **not mutated**, **positive**, or **negative**
- Also capture **date of test** if mentioned
- Always include the **exact sentence** as evidence

📌 Important:
- If a gene is only mentioned but **no status** is given (like mutated or wild type), leave "status" as empty string but still return the sentence.
- Be strict: only classify a gene as mutated/wild type if it’s clearly stated.

Return output strictly in the following JSON format:

{{
  "id": {patient_id},
  "name": "{name}",
  "mutational_status": {{
    "NPM1": {{"status": "", "date": "", "evidence": ""}},
    "TP53": {{"status": "", "date": "", "evidence": ""}},
    "FLT3": {{"status": "", "date": "", "evidence": ""}},
    "ASXL1": {{"status": "", "date": "", "evidence": ""}}
  }}
}}

Clinical Note:
\"\"\"{text}\"\"\"
"""

def build_genetic_mutation_prompt(text: str, doc_title: str) -> str:
    return f"""
You are a medical language model trained to extract structured genetic mutation data from clinical notes.

Please analyze the input text and extract gene mutations that meet **all** of the following criteria:

✅ Mutation must be:
- Explicitly stated as **positive**, **present**, **detected**, or **found**
- Related to a specific **gene name** (e.g., FLT3, NPM1, TP53, ASXL1)
- Supported by the **exact evidence sentence** (copied exactly from the input)
- Include the **document title**: "{doc_title}"

❌ Do NOT include:
- Genes marked as **negative**, **absent**, or **not detected**
- Summarized or inferred data
- Incomplete records (missing any of the 4 required fields)

---

💡 Examples of valid evidence:
- "Genomic analysis shows FLT3 mutation is positive."
- "NPM1 was detected in the genetic test."
- "TP53 mutation was found on sequencing."

---

📤 Output Format (JSON only):
{{
  "genetic_mutations": [
    {{
      "gene": "<GENE_NAME>",
      "presence": "positive",
      "docu_title": "{doc_title}",
      "evidence_sentence": "<EXACT_SENTENCE_FROM_NOTE>"
    }}
  ]
}}

---

📄 Input Text:
\"\"\"{text}\"\"\"
"""


def build_mutation_extraction_prompt(text: str, doc_title: str) -> str:
    return f"""
You are a medical language model trained to extract structured mutation data from clinical notes.

You will analyze the text and extract mutation information for these genes:
- NPM1, FLT3, TP53, ASXL1, RUNX1

📄 Document Title: {doc_title}

🔍 Extraction Instructions:
1. For each gene, extract:
   - `status`: mutated / not mutated / wild type / positive / negative
   - `date`: date of the test (if mentioned)
   - `evidence`: exact sentence or phrase from the note

2. If a gene is not mentioned at all, **do not include it** in the response.

3. If a gene is mentioned without status or date, still include it but leave the fields blank.

4. ❗ Avoid repeated entries:
   - Do not extract the same finding more than once
   - If the same mutation is mentioned multiple times in different wording, include only the most informative one.

🧾 Clinical Note:
\"\"\"{text}\"\"\"

📤 Return your result in this JSON format:
{{
  "document_title": "{doc_title}",
  "mutational_status": {{
    "NPM1": {{"status": "", "date": "", "evidence": ""}},
    "FLT3": {{"status": "", "date": "", "evidence": ""}},
    "TP53": {{"status": "", "date": "", "evidence": ""}},
    "ASXL1": {{"status": "", "date": "", "evidence": ""}},
    "RUNX1": {{"status": "", "date": "", "evidence": ""}}
  }}
}}

⚠️ Exclude genes completely if they are not mentioned in the note.
"""

