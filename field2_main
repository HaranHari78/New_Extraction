import os
import json
import re
from prompts_field import build_field_prompt
from utils import load_config, call_openai_api

# Input sentence JSONs and output dir
sentence_input_dir = r"C:\Users\HariharaM12\PycharmProjects\New_project\output\sentences"
field_output_dir = r"C:\Users\HariharaM12\PycharmProjects\New_project\output\fields"
os.makedirs(field_output_dir, exist_ok=True)

# Load config and model
config = load_config()
model_name = config['gpt_models']['model_gpt4o']

# Clean OpenAI response
def sanitize_json_response(raw_response: str):
    if not raw_response or not isinstance(raw_response, str):
        return ""
    cleaned = re.sub(r'```(?:json)?\n?|\n?```', '', raw_response).strip()
    return cleaned.replace('\n', ' ')

# Store all field-wise results
field_outputs = {
    "aml_diagnosis_date": [],
    "precedent_disease": [],
    "performance_status": [],
    "mutational_status": [],
    "treatment_details": [],
    "hospitalization_reason": [],
    "lab_results": [],
    "genetic_mutations": [],
    "followup_plan": []
}

# Process each sentence JSON
for filename in sorted(os.listdir(sentence_input_dir)):
    if not filename.endswith(".json"):
        continue

    with open(os.path.join(sentence_input_dir, filename), 'r', encoding='utf-8') as f:
        sentence_data = json.load(f)

    doc_title = sentence_data.get("document_title", filename.replace(".json", ""))
    prompt = build_field_prompt(sentence_data)
    response = call_openai_api(prompt, model_name)
    if not response:
        continue

    try:
        field_data = json.loads(sanitize_json_response(response))
    except json.JSONDecodeError:
        print(f"⚠️ JSON decode failed for: {filename}")
        continue

    # Append only non-empty data per field
    for field in field_outputs:
        value = field_data.get(field)
        if isinstance(value, dict):
            if any(v for v in value.values() if isinstance(v, dict) or v):
                field_outputs[field].append({"document_title": doc_title, field: {
                    k: v for k, v in value.items() if isinstance(v, dict) and any(v.values())
                }})
        elif isinstance(value, list):
            clean_items = [item for item in value if any(item.values())]
            if clean_items:
                field_outputs[field].append({"document_title": doc_title, field: clean_items})

# Save each field into its own JSON
for field, records in field_outputs.items():
    output_path = os.path.join(field_output_dir, f"{field}.json")
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(records, f, indent=4)
    print(f"✅ Saved → {output_path}")
