import os
import json
import re
from pathlib import Path

# Input folder (field-level JSON files)
field_input_dir = Path(r"C:\Users\HariharaM12\PycharmProjects\New_project\output\fields")

# Output paths for combined files
performance_output_path = Path(r"C:\Users\HariharaM12\PycharmProjects\New_project\output\combined_performance_status.json")
mutation_output_path = Path(r"C:\Users\HariharaM12\PycharmProjects\New_project\output\combined_mutational_status.json")
precedent_output_path = Path(r"C:\Users\HariharaM12\PycharmProjects\New_project\output\combined_precedent_disease.json")

# Helper to sanitize filenames
def sanitize_filename(name: str) -> str:
    return re.sub(r'[\\/*?:"<>|]', "_", name)

# Containers for combined results
performance_combined = []
mutation_combined = []
precedent_combined = []

# Loop through field files
for filename in os.listdir(field_input_dir):
    if not filename.endswith(".json"):
        continue

    input_path = field_input_dir / filename
    try:
        with open(input_path, 'r', encoding='utf-8') as f:
            content = f.read().strip()
        if not content:
            continue
        data = json.loads(content)
    except Exception:
        continue

    title = data.get("document_title", filename.replace(".json", ""))

    # â¬› 1. Performance status (add only if any value/evidence exists)
    perf = data.get("performance_status", {})
    if perf.get("ecog_score", {}).get("value") or perf.get("ecog_score", {}).get("evidence") or \
       perf.get("kps_score", {}).get("value") or perf.get("kps_score", {}).get("evidence"):
        performance_combined.append({
            "document_title": title,
            "performance_status": {
                k: v for k, v in perf.items() if any(v.values())
            }
        })

    # â¬› 2. Mutational status (filter out empty gene data)
    mutations = data.get("mutational_status", {})
    filtered_mutations = {
        gene: info for gene, info in mutations.items()
        if any(info.values())
    }
    if filtered_mutations:
        mutation_combined.append({
            "document_title": title,
            "mutational_status": filtered_mutations
        })

    # â¬› 3. Precedent disease (only if list has actual entries)
    precedent = data.get("precedent_disease", [])
    filtered_diseases = [d for d in precedent if any(d.values())]
    if filtered_diseases:
        precedent_combined.append({
            "document_title": title,
            "precedent_disease": filtered_diseases
        })

# ðŸ”½ Save all three combined outputs
with open(performance_output_path, 'w', encoding='utf-8') as f:
    json.dump(performance_combined, f, indent=4)

with open(mutation_output_path, 'w', encoding='utf-8') as f:
    json.dump(mutation_combined, f, indent=4)

with open(precedent_output_path, 'w', encoding='utf-8') as f:
    json.dump(precedent_combined, f, indent=4)

print("âœ… Combined files created successfully.")
