import json
import re
import os
import pandas as pd
from prompts import build_sentence_prompt
from utils import load_config, call_openai_api

# Output directory for sentence files
output_dir = r"C:\Users\HariharaM12\PycharmProjects\New_project\output\sentences"
os.makedirs(output_dir, exist_ok=True)

# Config and model
config = load_config()
model_name = config['gpt_models']['model_gpt4o']
input_csv_path = r"C:\Users\HariharaM12\Downloads\medicaldata.csv"

# Clean response
def sanitize_json_response(raw_response: str):
    if not raw_response or not isinstance(raw_response, str):
        return ""
    cleaned = re.sub(r'```(?:json)?\n?|\n?```', '', raw_response).strip()
    return cleaned.replace('\n', ' ')

# Clean file name
def sanitize_filename(name: str) -> str:
    return re.sub(r'[\\/*?:"<>|]', "_", name)

# Load input CSV
df = pd.read_csv(input_csv_path, encoding='utf-8')
print(f"üìÑ Total rows: {len(df)}")

# Iterate through each row
for idx, row in df.iterrows():
    doc_title = row.get('title', f"doc_{idx}")
    doc_text = row.get('text', "")

    if not doc_text:
        continue

    print(f"üîç Extracting sentences for: {doc_title[:60]}")

    prompt = build_sentence_prompt(doc_text)
    response = call_openai_api(prompt, model_name)

    if not response:
        print("‚ùå No response from OpenAI.")
        continue

    cleaned_response = sanitize_json_response(response)

    try:
        sentence_data = json.loads(cleaned_response)
        sentence_data["document_title"] = doc_title
    except json.JSONDecodeError:
        print("‚ö†Ô∏è JSON parse error.")
        continue

    filename = sanitize_filename(doc_title) + ".json"
    file_path = os.path.join(output_dir, filename)

    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(sentence_data, f, indent=4)
        print(f"‚úÖ Saved ‚Üí {file_path}")
    except Exception as e:
        print(f"‚ùå Error saving file: {e}")
